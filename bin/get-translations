#!/usr/bin/env node
require('dotenv').config()

const { GoogleSpreadsheet } = require('google-spreadsheet')
const { GOOGLE_AUTH_CREDS_PATH, GOOGLE_SHEET_ID } = process.env
const [
  sheetId = GOOGLE_SHEET_ID,
  worksheets = ['Pre-approval', 'Generic forms']
] = process.argv.slice(2)

if (!GOOGLE_AUTH_CREDS_PATH) {
  throw new Error('You must set GOOGLE_AUTH_CREDS_PATH to the path of your Service Account credentials JSON file. See <https://cloud.google.com/iam/docs/service-accounts> for more info.')
}

const credsPath = `${process.cwd()}/${GOOGLE_AUTH_CREDS_PATH}`
const creds = require(credsPath)

async function main () {
  // spreadsheet key is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(sheetId)
  await doc.useServiceAccountAuth(creds)

  await doc.loadInfo() // loads document properties and worksheets
  console.warn('Sheet title:', doc.title)

  const i18n = {}

  for (const [index, sheet] of Object.entries(doc.sheetsByIndex)) {
    if (worksheets.includes(index) || worksheets.includes(sheet.title)) {
      console.warn('Loading sheet #%d: "%s"...', index, sheet.title)
    } else {
      console.warn('Skipping sheet #%d: "%s"', index, sheet.title)
      continue
    }

    const rows = await sheet.getRows()
    const [keyColumn, ...locales] = sheet.headerValues
    console.warn('Reading %d rows, key column: "%s", locales: %s', rows.length, keyColumn, JSON.stringify(locales))

    for (const locale of locales) {
      if (!i18n[locale]) {
        i18n[locale] = {}
      }
    }

    for (const row of rows) {
      const key = row[keyColumn]
      for (const locale of locales) {
        if (row[locale]) {
          if (key) i18n[locale][key] = trim(row[locale])
          if (locale !== 'en') i18n[locale][row.en] = trim(row[locale])
        } else {
          console.warn('string "%s" missing locale "%s"', key, locale)
        }
      }
    }
  }

  process.stdout.write(JSON.stringify(i18n, null, 2) + '\n')
}

main()

function trim (val) {
  return (typeof val === 'string') ? val.trim() : val
}
