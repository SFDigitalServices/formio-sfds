#!/usr/bin/env node
const globby = require('globby')
const nunjucks = require('nunjucks')
const mkdirp = require('mkdirp')
const remark = require('remark')
const remarkHTML = require('remark-html')
const remarkFrontmatter = require('remark-frontmatter')
const remarkGitHub = require('remark-github')
const remarkGFM = require('remark-gfm')
const remarkAutolinkHeaders = require('remark-autolink-headings')
const remarkSlug = require('remark-slug')
const remarkHighlight = require('remark-highlight.js')
const h = require('hastscript')
const visit = require('unist-util-visit')
const yaml = require('js-yaml')
const { basename, join } = require('path')
const { readFileSync, writeFileSync } = require('fs')

require('dotenv').config()

const {
  VERCEL_URL: deploymentURL
} = process.env

const outDir = join(__dirname, '../dist')

const examples = yaml
  .safeLoad(readFileSync('src/examples.yml', 'utf8'))
  .sort((a, b) => a.title.localeCompare(b.title))

const data = require('../views/data')
Object.assign(data, { examples })

const env = nunjucks.configure(join(__dirname, '../views'), {
  autoescape: false
})

console.warn('finding views...')

globby(['views/*.html', '!views/docs.html'])
  .then(paths => {
    for (const templatePath of paths) {
      const filename = basename(templatePath)
      console.warn('rendering "%s"...', filename)
      const output = env.render(filename, data)
      const outPath = join(outDir, filename)
      console.warn('writing "%s"...', outPath)
      writeFileSync(outPath, output, 'utf8')
    }
  })
  .then(async () => {
    const exDir = join(outDir, 'examples')
    await mkdirp(exDir)
    for (const example of examples) {
      console.warn('rendering example "%s"...', example.id)
      const output = env.render('example.html', Object.assign({ example }, data))
      const outPath = join(exDir, `${example.id}.html`)
      writeFileSync(outPath, output, 'utf8')
    }
  })

globby(['README.md', 'docs/*.md'])
  .then(async paths => {
    const docsDir = join(outDir, 'docs')
    await mkdirp(docsDir)

    let page = {}
    let parsed
    const processor = remark()
      .use(remarkFrontmatter, ['yaml'])
      .use(options => tree => {
        const [node] = tree.children
        if (node && node.type === 'yaml') {
          Object.assign(page, yaml.safeLoad(node.value, 'utf8'))
        }
      })
      .use(remarkGitHub)
      .use(remarkGFM)
      .use(remarkHTML)
      .use(options => tree => {
        parsed = tree
        visit(tree, 'heading', node => { node.depth += 1 })
        visit(tree, 'link', node => {
          const gitURL = `https://github.com/SFDigitalServices/formio-sfds/tree/${data.git.ref}`
          const oldURL = node.url
          if (node.url.startsWith('docs/')) {
            node.url = node.url.replace(/^docs\//, '')
          }
          node.url = node.url
            .replace('.md', '.html')
            .replace('../src', `${gitURL}/src`)
            .replace(/#readme$/, '')
          if (deploymentURL) {
            node.url = node.url
              .replace('formio-sfds.vercel.app', deploymentURL)
          } else {
            node.url = node.url
              .replace('https://formio-sfds.vercel.app', '')
            if (!node.url) {
              node.url = '/'
            }
          }
          if (node.url !== oldURL) {
            console.log('  link change: %s → %s', oldURL, node.url)
          }
        })
      })
      .use(remarkSlug)
      .use(remarkAutolinkHeaders, {
        content: h('span.pr-1.fg-grey-4', '#')
      })
      .use(remarkHighlight)

    for (const mdPath of paths) {
      page = { path: mdPath.replace(`${process.cwd()}/`, '') }
      const markdown = readFileSync(mdPath, 'utf8')
      const file = await processor.process(markdown)
      const content = file.toString()
      const output = env.render('docs.html', Object.assign({ content, page, parsed }, data))
      const filename = basename(mdPath)
        .replace('README', 'index')
        .replace('.md', '.html')
      const outPath = join(docsDir, filename)
      console.log('docs: %s → %s', mdPath, outPath, page)
      writeFileSync(outPath, output, 'utf8')
    }
  })
