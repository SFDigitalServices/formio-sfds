#!/usr/bin/env node
const globby = require('globby')
const nunjucks = require('nunjucks')
const mkdirp = require('mkdirp')
const yaml = require('js-yaml')
const { basename, dirname, join } = require('path')
const { readFileSync, writeFileSync } = require('fs')
const remarkProcessor = require('../lib/remark')

require('dotenv').config()

const outDir = join(__dirname, '../dist')

const examples = yaml
  .safeLoad(readFileSync('src/examples.yml', 'utf8'))
  .sort((a, b) => a.title.localeCompare(b.title))

const data = require('../views/data')
Object.assign(data, { examples })

const env = nunjucks.configure(join(__dirname, '../views'), {
  autoescape: false
})

console.warn('finding views...')

globby(['views/*.html', '!views/docs.html'])
  .then(async paths => {
    for (const templatePath of paths) {
      const filename = basename(templatePath)
      console.warn('rendering "%s"...', filename)
      const output = env.render(filename, data)
      const outPath = join(
        outDir,
        filename
          .replace('.html', '/index.html')
          .replace('index/index', 'index')
      )
      console.warn('writing "%s"...', outPath)
      await writeFile(outPath, output, 'utf8')
    }
  })
  .then(async () => {
    const exDir = join(outDir, 'examples')
    await mkdirp(exDir)
    for (const example of examples) {
      console.warn('rendering example "%s"...', example.id)
      const output = env.render('example.html', Object.assign({ example }, data))
      const outPath = join(exDir, `${example.id}/index.html`)
      await writeFile(outPath, output, 'utf8')
    }
  })

globby(['README.md', 'docs/*.md'])
  .then(async paths => {
    const docsDir = join(outDir, 'docs')
    await mkdirp(docsDir)

    let page = {}
    let parsed
    const processor = remarkProcessor(data)
      .use(options => tree => {
        parsed = tree
        const [node] = tree.children
        if (node && node.type === 'yaml') {
          Object.assign(page, yaml.safeLoad(node.value, 'utf8'))
        }
      })

    for (const mdPath of paths) {
      page = { path: mdPath.replace(`${process.cwd()}/`, '') }
      const markdown = readFileSync(mdPath, 'utf8')
      const file = await processor.process(markdown)
      const content = file.toString()
      const output = env.render('docs.html', Object.assign({ content, page, parsed }, data))
      const filename = basename(mdPath)
        .replace('README', 'index')
        .replace('.md', '/index.html')
        .replace('index/index', 'index')
      const outPath = join(docsDir, filename)
      console.log('docs: %s â†’ %s', mdPath, outPath, page)
      await writeFile(outPath, output, 'utf8')
    }
  })

async function writeFile (path, ...args) {
  await mkdirp(dirname(path))
  writeFileSync(path, ...args)
}
